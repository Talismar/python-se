name: Selenium Test

on:
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        services:
          postgres:
            image: postgres:15
            ports:
              - 5432:5432
            env:
              POSTGRES_USER: testuser
              POSTGRES_PASSWORD: testpassword
              POSTGRES_DB: testdb
              options: >-
                --health-cmd "pg_isready -U testuser"
                --health-interval 10s
                --health-timeout 5s
                  --health-retries 5

          redis:
            image: redis:7
            ports:
              - 6379:6379
            options: >-
              --health-cmd "redis-cli ping"
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5

          selenium:
            image: selenium/standalone-firefox
            options: --shm-size 2gb
            ports:
              - 4444:4444
              - 7900:7900
        
        steps:
        - name: Wait for PostgreSQL and Redis to be ready
          run: |
            until pg_isready -h localhost -p 5432 -U testuser; do
              echo "Waiting for PostgreSQL..."
              sleep 2
            done

            sudo apt-get install redis-tools -y
            until redis-cli -h localhost ping | grep -q PONG; do
              echo "Waiting for Redis..."
              sleep 2
            done

        - name: Create additional database (audit_trail)
          run: |
              PGPASSWORD=testpassword psql -h localhost -U testuser -d postgres -c "CREATE DATABASE audit_trail;"        

        - name: Aguardar o Selenium estar pronto
          run: |
            until curl -s http://localhost:4444/wd/hub/status | grep -q "ready"; do
              echo "Aguardando o Selenium estar pronto..."
              sleep 5
            done
            echo "Selenium estÃ¡ pronto!"
        
        - name: Obter o IP privado
          id: get_ip
          run: |
            IP_PRIVADO=$(hostname -I | awk '{print $1}')
            echo "IP privado: $IP_PRIVADO"
            echo "HOST_IP=$IP_PRIVADO" >> $GITHUB_ENV

        - name: Checkout Frontend Code Repository
          uses: actions/checkout@v4
          with:
            path: 'frontend'
            repository: 'Thalocan-TRI/tavos-front'
            token: ${{ secrets.SECRET }}

        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '18.x'

        - name: Install Frontend Dependencies
          run: |
            cd frontend
            npm install
  
        - name: Install Frontend Dependencies
          env:
            NEXT_PUBLIC_URL_API: https://back-tavos-dev.thalocan.com
            NEXT_PUBLIC_WS_BASE_URL: wss://back-tavos-dev.thalocan.com
            NEXT_IMAGES_DOMAINS: back-tavos-dev.thalocan.com
            CSP_CONNECT_SRC_URLS: https://back-tavos-dev.thalocan.com wss://back-tavos-dev.thalocan.com
          run: |
            cd frontend
            npm run dev &
    
        - name: Checkout Backend Code Repository
          uses: actions/checkout@v4
          with:
            path: 'backend'
            # ref: 'feature/setup-selenium-test'
            # repository: 'Thalocan-TRI/tavos-back'
            # token: ${{ secrets.SECRET }}

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10.12'

        - name: Install Backend Dependencies
          run: |
            cd backend
            python -m pip install --upgrade pip
            pip install -r requirements.txt
  
        # - name: Run tests
        #   env:
        #     DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb
        #     REDIS_URL: redis://localhost:6379/0
        #     DOMAIN_BACK_URL: http://localhost:8000
        #     FRONT_URL: http://localhost:3000
        #     AUDIT_TRAIL_DATABASE_URL: postgres://testuser:testpassword@localhost:5432/audit_trail
        #     SELENIUM_HEADLESS: "True"
        #   run: |
        #     cd backend
        #     python manage.py test tests.e2e.test_system

        - name: Run tests
          env:
            HOST_IP: ${{ env.HOST_IP }} 
          run: |
            FRONT_URL="http://$HOST_IP:3000"
            echo "FRONT_URL: $FRONT_URL"
            cd backend
            FRONT_URL=$FRONT_URL python main.py

        # - name: Install and run
        #   run: |
        #     docker compose up --abort-on-container-exit

        # - name: Upload screenshot
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: screenshot
        #     path: screenshot.png


# $(hostname -I | awk '{print $1}')